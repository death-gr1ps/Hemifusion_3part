# packages import
import numpy as np



''' Energy functions of  radial bilayer lipid membrane for minimizing energy by SciPy.optimize.minimize function.
    Important Note: this is energy is divided by pi. 
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def horiz_bi ( x, raw_r, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):
  
# Setting the initial parameters of the bilayer.
  (sigma, Kt, Ka, B, h_0u, h_0d, J_0u, J_0d) = parameters

  if right_values == None:
    (n_1u, n_1d, H_1u, H_1d, M_1) = (None, None, None, None, None)

  else:
    (n_1u, n_1d, H_1u, H_1d, M_1) = right_values

  if left_values == None:
    (n_0u, n_0d, H_0u, H_0d, M_0) = (None, None, None, None, None)

  else:
    (n_0u, n_0d, H_0u, H_0d, M_0) = left_values


  # determination of the variables for which optimization is carried out.
  raw_n_u, raw_n_d = x[::5], x[1::5]
  raw_H_u, raw_H_d, raw_M = x[2::5], x[3::5], x[4::5]

  # We substitute boundary conditions, unless None is written in them
  if n_0u != None: raw_n_u[0] = n_0u
  if n_1u != None: raw_n_u[-1] = n_1u
  if n_0d != None: raw_n_d[0] = n_0d
  if n_1d != None: raw_n_d[-1] = n_1d
  if H_0u != None: raw_H_u[0] = H_0u
  if H_1u != None: raw_H_u[-1] = H_1u 
  if H_0d != None: raw_H_d[0] = H_0d
  if H_1d != None: raw_H_d[-1] = H_1d
  if M_0 != None: raw_M[0] = M_0
  if M_1 != None: raw_M[-1] = M_1

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n_u = raw_n_u[: -1]
  n_d = raw_n_d[: -1]
  H_u = raw_H_u[: -1]
  H_d = raw_H_d[: -1]
  M = raw_M[: -1]
  r = raw_r[: -1]
  
  # Determination of derivatives and differentials
  dr = raw_r[1:] - raw_r[:-1]
  dn_u = (raw_n_u[1:] - raw_n_u[:-1])/dr
  dn_d = (raw_n_d[1:] - raw_n_d[:-1])/dr
  dH_u = (raw_H_u[1:] - raw_H_u[:-1])/dr
  dH_d = (raw_H_d[1:] - raw_H_d[:-1])/dr
    
  # Determination of equation part
  en_B_u = ((dn_u + n_u/r + J_0u)**2 - J_0u**2)
  en_B_d = ((dn_d + n_d/r + J_0d)**2 - J_0d**2)
  en_Kt_u = ((n_u - dH_u)**2)
  en_Kt_d = ((n_d + dH_d)**2)
  en_Ka_u = ((1 - (H_u - M)/h_0u - h_0u*(dn_u + n_u/r)/2)**2)
  en_Ka_d = ((1 - (M - H_d)/h_0d - h_0d*(dn_d + n_d/r)/2)**2)
  en_sigma_u = (dH_u**2)
  en_sigma_d = (dH_d**2)

  # Energy calculation
  en = ( B* (en_B_u + en_B_d) + Kt* (en_Kt_u + en_Kt_d) + Ka* (en_Ka_u + en_Ka_d) + sigma*( en_sigma_u + en_sigma_d ) ) *r *dr
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n_u[-1], raw_n_d[-1], raw_H_u[-1], raw_H_d[-1], raw_M[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n_u[0], raw_n_d[0], raw_H_u[0], raw_H_d[0], raw_M[0]] )

  return total_en



''' Energy functions of bilayer lipid tube for minimizing energy by SciPy.optimize.minimize function.
    Important Note: this is energy is divided by pi. This function differ from sqrt_tub_bi by 
    raplaceng usual radius by their saquare for avoiding zero values.
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def sqrt_tub_bi(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):

  # Setting the initial parameters of the bilayer.
  (sigma_0, K_t, K_a, K_g, B, h_0e, h_0i, J_Se, J_Si, delta_R) = parameters

  if right_values == None:
    (n_1e, n_1i, R_1e, R_1i, R_1m) = (None, None, None, None, None)

  else:
    (n_1e, n_1i, R_1e, R_1i, R_1m) = right_values

  if left_values == None:
    (n_0e, n_0i, R_0e, R_0i, R_0m) = (None, None, None, None, None)

  else:
    (n_0e, n_0i, R_0e, R_0i, R_0m) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n_e, raw_n_i = x[::5], x[1::5]
  raw_sqrt_R_e, raw_sqrt_R_i, raw_sqrt_R_m = x[2::5], x[3::5], x[4::5]

  # We substitute boundary conditions, unless None is written in them
  if n_0e != None: raw_n_e[0] = n_0e
  if n_1e != None: raw_n_e[-1] = n_1e
  if n_0i != None: raw_n_i[0] = n_0i
  if n_1i != None: raw_n_i[-1] = n_1i
  if R_0e != None: raw_sqrt_R_e[0] = np.sqrt(R_0e - delta_R)
  if R_1e != None: raw_sqrt_R_e[-1] = np.sqrt(R_1e - delta_R)
  if R_0i != None: raw_sqrt_R_i[0] = np.sqrt(R_0i - delta_R)
  if R_1i != None: raw_sqrt_R_i[-1] = np.sqrt(R_1i - delta_R)
  if R_0m != None: raw_sqrt_R_m[0] = np.sqrt(R_0m - delta_R)
  if R_1m != None: raw_sqrt_R_m[-1] = np.sqrt(R_1m - delta_R)

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n_e = raw_n_e[: -1]
  n_i = raw_n_i[: -1]
  raw_R_e = raw_sqrt_R_e**2 + delta_R
  raw_R_i = raw_sqrt_R_i**2 + delta_R
  raw_R_m = raw_sqrt_R_m**2 + delta_R
  R_e = raw_R_e[: -1]
  R_i = raw_R_i[: -1]
  R_m = raw_R_m[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn_e = (raw_n_e[1:] - raw_n_e[:-1])/dz
  dn_i = (raw_n_i[1:] - raw_n_i[:-1])/dz
  dR_e = (raw_R_e[1:] - raw_R_e[:-1])/dz
  dR_i = (raw_R_i[1:] - raw_R_i[:-1])/dz
  
  # Determination of equation part
  en_B_e = (- 1/R_e + dn_e + J_Se)**2 - J_Se**2
  en_B_i = (1/R_i + dn_i + J_Si)**2 - J_Si**2
  en_Kg_e = - 2*dn_e/R_e
  en_Kg_i = 2*dn_i/R_i
  en_Kt_e = (n_e - dR_e)**2
  en_Kt_i = (n_i + dR_i)**2
  en_Ka_e = ( (R_m - R_e)/h_0e + 1 - h_0e/2 * (- 1/R_e + dn_e) )**2 
  en_Ka_i = ( (R_i - R_m)/h_0i + 1 - h_0i/2 * (1/R_i +dn_i) )**2

  # Energy calculation
  en = ( (B*en_B_e + K_g*en_Kg_e + K_t*en_Kt_e + K_a*en_Ka_e + 2*sigma_0)*R_e*np.sqrt(1 + dR_e**2) + \
                (B*en_B_i + K_g*en_Kg_i + K_t*en_Kt_i + K_a*en_Ka_i + 2*sigma_0)*R_i*np.sqrt(1 + dR_i**2) )*dz
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n_e[-1], raw_n_i[-1], raw_R_e[-1], raw_R_i[-1], raw_R_m[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n_e[0], raw_n_i[0], raw_R_e[0], raw_R_i[0], raw_R_m[0]] )

  return total_en



''' Energy functions of bilayer lipid tube for minimizing energy by SciPy.optimize.minimize function.
    Important Note: this is energy is divided by pi.
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def tub_bi(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):

  # Setting the initial parameters of the bilayer.
  (sigma_0, K_t, K_a, K_g, B, h_0e, h_0i, J_Se, J_Si) = parameters

  if right_values == None:
    (n_1e, n_1i, R_1e, R_1i, R_1m) = (None, None, None, None, None)

  else:
    (n_1e, n_1i, R_1e, R_1i, R_1m) = right_values

  if left_values == None:
    (n_0e, n_0i, R_0e, R_0i, R_0m) = (None, None, None, None, None)

  else:
    (n_0e, n_0i, R_0e, R_0i, R_0m) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n_e, raw_n_i = x[::5], x[1::5]
  raw_R_e, raw_R_i, raw_R_m = x[2::5], x[3::5], x[4::5]

  # We substitute boundary conditions, unless None is written in them
  if n_0e != None: raw_n_e[0] = n_0e
  if n_1e != None: raw_n_e[-1] = n_1e
  if n_0i != None: raw_n_i[0] = n_0i
  if n_1i != None: raw_n_i[-1] = n_1i
  if R_0e != None: raw_R_e[0] = R_0e
  if R_1e != None: raw_R_e[-1] = R_1e
  if R_0i != None: raw_R_i[0] = R_0i
  if R_1i != None: raw_R_i[-1] = R_1i
  if R_0m != None: raw_R_m[0] = R_0m
  if R_1m != None: raw_R_m[-1] = R_1m

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n_e = raw_n_e[: -1]
  n_i = raw_n_i[: -1]
  R_e = raw_R_e[: -1]
  R_i = raw_R_i[: -1]
  R_m = raw_R_m[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn_e = (raw_n_e[1:] - raw_n_e[:-1])/dz
  dn_i = (raw_n_i[1:] - raw_n_i[:-1])/dz
  dR_e = (raw_R_e[1:] - raw_R_e[:-1])/dz
  dR_i = (raw_R_i[1:] - raw_R_i[:-1])/dz
  
  # Determination of equation part
  en_B_e = (- 1/R_e + dn_e + J_Se)**2 - J_Se**2
  en_B_i = (1/R_i + dn_i + J_Si)**2 - J_Si**2
  en_Kg_e = - 2*dn_e/R_e
  en_Kg_i = 2*dn_i/R_i
  en_Kt_e = (n_e - dR_e)**2
  en_Kt_i = (n_i + dR_i)**2
  en_Ka_e = ( (R_m - R_e)/h_0e + 1 - h_0e/2 * (- 1/R_e + dn_e) )**2 
  en_Ka_i = ( (R_i - R_m)/h_0i + 1 - h_0i/2 * (1/R_i +dn_i) )**2

  # Energy calculation
  en = ( (B*en_B_e + K_g*en_Kg_e + K_t*en_Kt_e + K_a*en_Ka_e + 2*sigma_0)*R_e*np.sqrt(1 + dR_e**2) + \
                (B*en_B_i + K_g*en_Kg_i + K_t*en_Kt_i + K_a*en_Ka_i + 2*sigma_0)*R_i*np.sqrt(1 + dR_i**2) )*dz
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n_e[-1], raw_n_i[-1], raw_R_e[-1], raw_R_i[-1], raw_R_m[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n_e[0], raw_n_i[0], raw_R_e[0], raw_R_i[0], raw_R_m[0]] )

  return total_en



''' Energy functions of monolayer lipid tube with derived from upper layer of bilayer tube for minimizing energy
    by SciPy.optimize.minimize function. Important Note: this is energy is divided by pi. This function differ 
    from tub_ex_mon by raplaceng usual radius by their saquare for avoiding zero values.
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
output_values - 
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def sqrt_tub_ex_mon(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):

  # Setting the initial parameters of the monolayer.
  (sigma_0, K_t, K_g, B, J_S, delta_R) = parameters

  if right_values == None:
    (n_1, R_1) = (None, None)

  else:
    (n_1, R_1) = right_values

  if left_values == None:
    (n_0, R_0) = (None, None)

  else:
    (n_0, R_0) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n, raw_sqrt_R = x[::2], x[1::2]

  # We substitute boundary conditions, unless None is written in them
  if n_0 != None: raw_n[0] = n_0
  if n_1 != None: raw_n[-1] = n_1
  if R_0 != None: raw_sqrt_R[0] = np.sqrt(R_0 - delta_R)
  if R_1 != None: raw_sqrt_R[-1] = np.sqrt(R_1 - delta_R)

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n = raw_n[: -1]
  raw_R = raw_sqrt_R**2 + delta_R
  R = raw_R[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn = (raw_n[1:] - raw_n[:-1])/dz
  dR = (raw_R[1:] - raw_R[:-1])/dz

  # Determination of equation part
  en_B = (- 1/R + dn + J_S)**2 - J_S**2
  en_Kg = - 2*dn/R
  en_Kt = (n - dR)**2

  # Energy calculation
  en = ( (B*en_B + K_g*en_Kg + K_t*en_Kt + 2*sigma_0)*R*np.sqrt(1 + dR**2) )*dz
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n[-1], raw_R[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n[0], raw_R[0]] )

  return total_en



''' Energy functions of monolayer lipid tube with derived from upper layer of bilayer tube for minimizing energy
    by SciPy.optimize.minimize function. Important Note: this is energy is divided by pi. 
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
output_values - 
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def tub_ex_mon(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):

  # Setting the initial parameters of the monolayer.
  (sigma_0, K_t, K_g, B, J_S) = parameters

  if right_values == None:
    (n_1, R_1) = (None, None)

  else:
    (n_1, R_1) = right_values

  if left_values == None:
    (n_0, R_0) = (None, None)

  else:
    (n_0, R_0) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n, raw_R = x[::2], x[1::2]

  # We substitute boundary conditions, unless None is written in them
  if n_0 != None: raw_n[0] = n_0
  if n_1 != None: raw_n[-1] = n_1
  if R_0 != None: raw_R[0] = R_0
  if R_1 != None: raw_R[-1] = R_1

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n = raw_n[: -1]
  R = raw_R[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn = (raw_n[1:] - raw_n[:-1])/dz
  dR = (raw_R[1:] - raw_R[:-1])/dz

  # Determination of equation part
  en_B = (- 1/R + dn + J_S)**2 - J_S**2
  en_Kg = - 2*dn/R
  en_Kt = (n - dR)**2

  # Energy calculation
  en = ( (B*en_B + K_g*en_Kg + K_t*en_Kt + 2*sigma_0)*R*np.sqrt(1 + dR**2)  )*dz 
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n[-1], raw_R[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n[0], raw_R[0]] )

  return total_en



''' Energy functions of monolayer lipid tube with derived from bottom layer of bilayer tube for minimizing energy
    by SciPy.optimize.minimize function. Important Note: this is energy is divided by pi. This function differ 
    from tub_in_mon by raplaceng usual radius by their saquare for avoiding zero values.
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
output_values - 
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def sqrt_tub_in_mon(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):

  # Setting the initial parameters of the monolayer.
  (sigma_0, K_t, K_g, B, J_S, delta_R) = parameters

  if right_values == None:
    (n_1, R_1) = (None, None)

  else:
    (n_1, R_1) = right_values

  if left_values == None:
    (n_0, R_0) = (None, None)

  else:
    (n_0, R_0) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n, raw_sqrt_R = x[::2], x[1::2]

  # We substitute boundary conditions, unless None is written in them
  if n_0 != None: raw_n[0] = n_0
  if n_1 != None: raw_n[-1] = n_1
  if R_0 != None: raw_sqrt_R[0] = np.sqrt(R_0 - delta_R)
  if R_1 != None: raw_sqrt_R[-1] = np.sqrt(R_1 - delta_R)

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n = raw_n[: -1]
  raw_R = raw_sqrt_R**2 + delta_R
  R = raw_R[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn = (raw_n[1:] - raw_n[:-1])/dz
  dR = (raw_R[1:] - raw_R[:-1])/dz

  # Determination of equation part
  en_B = (1/R + dn + J_S)**2 - J_S**2
  en_Kg = 2*dn/R
  en_Kt =(n + dR)**2

  # Energy calculation
  en = ( (B*en_B + K_g*en_Kg + K_t*en_Kt + 2*sigma_0)*R*np.sqrt(1 + dR**2) )*dz
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

  # Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n[-1], raw_R[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n[0], raw_R[0]] )

  return total_en



''' Energy functions of monolayer lipid tube with derived from bottom layer of bilayer tube for minimizing energy
    by SciPy.optimize.minimize function. Important Note: this is energy is divided by pi.
x - parameters vektor
parameters - tuple consisting of constants
raw_r - the axis of the vector along which the summation occurs
left_value - left boundary condition. If None all parameters will be used for minimizing energy
right_values - right boundary condition. If None all parameters will be used for minimizing energy
output_values - 
energy_density - list type variable which correspond to getting energy density of each point of grid
output_values - list with stirng data type word coresponding to boundary condition output '''

def tub_in_mon(x, raw_z, parameters, left_values = None, right_values = None, energy_density = None, output_values = None):
  
  # Setting the initial parameters of the monolayer.
  (sigma_0, K_t, K_g, B, J_S) = parameters

  if right_values == None:
    (n_1, R_1) = (None, None)

  else:
    (n_1, R_1) = right_values

  if left_values == None:
    (n_0, R_0) = (None, None)

  else:
    (n_0, R_0) = left_values

  # determination of the variables for which optimization is carried out.
  raw_n, raw_R = x[::2], x[1::2]

  # We substitute boundary conditions, unless None is written in them
  if n_0 != None: raw_n[0] = n_0
  if n_1 != None: raw_n[-1] = n_1
  if R_0 != None: raw_R[0] = R_0
  if R_1 != None: raw_R[-1] = R_1

  # Truncation of vectors to make them equal to the vectors of derivatives and differentials
  n = raw_n[: -1]
  R = raw_R[: -1]

  # Determination of derivatives and differentials
  dz = raw_z[1:] - raw_z[:-1]
  dn = (raw_n[1:] - raw_n[:-1])/dz
  dR = (raw_R[1:] - raw_R[:-1])/dz

  # Determination of equation part
  en_B = (1/R + dn + J_S)**2 - J_S**2
  en_Kg = 2*dn/R
  en_Kt =(n + dR)**2

  # Energy calculation
  en = ( (B*en_B + K_g*en_Kg + K_t*en_Kt + 2*sigma_0)*R*np.sqrt(1 + dR**2) )*dz
  total_en = np.sum(en) + en[-1]

  # Save energy of each poiont of grid
  if type(energy_density) == list and len(energy_density) == 0:
    energy_density.extend(list(en))

# Vector creation with parameters of last point. Prerequisites for defining a crosslink
  if output_values == ['right']:
    del(output_values[0])
    output_values.extend( [raw_n[-1], raw_R[-1]] )

  elif output_values == ['left']:
    del(output_values[0])
    output_values.extend( [raw_n[0], raw_R[0]] )

  return total_en
